name: Update module
on:
  repository_dispatch:
    types: update_remote

jobs:
  update:
    if: ${{github.event.client_payload.branch}} == 'develop'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          token: ${{ secrets.PAT }}
          submodules: recursive
      - name: Update module
        run: |
          git switch "${{github.event.client_payload.branch}}"
          git submodule update --init --recursive --checkout -f --remote -- "${{github.event.client_payload.module}}"
          git config --global user.name "GitHub Action"
          git config --global user.email "noreply@github.com"
          git commit -am "deploy (dev): ${{github.event.client_payload.module}} - ${{github.event.client_payload.sha}}"
          git push

  deploy:
    runs-on: ubuntu-latest
    needs: update
    steps:
      - name: executing remote ssh commands to deploy
        uses: appleboy/ssh-action@master
        with:
          host: ${{ vars.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_KEY }}
          passphrase: ${{ secrets.PASSPHRASE }}
          script: |
            touch .env
            echo DEBUG=${{ vars.DEBUG }} > .env

            echo POSTGRES_DB=${{ vars.POSTGRES_DB }} >> .env
            echo POSTGRES_USER=${{ vars.POSTGRES_USER }} >> .env
            echo "POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }}" >> .env
            echo POSTGRES_HOST=${{ vars.POSTGRES_HOST }} >> .env
            echo POSTGRES_PORT=${{ vars.POSTGRES_PORT }} >> .env

            echo "SECRET_KEY=${{ secrets.SECRET_KEY }}" >> .env
            echo "ALLOWED_HOSTS=${{ vars.ALLOWED_HOSTS }}" >> .env
            echo EMAIL_HOST=${{ vars.EMAIL_HOST }} >> .env
            echo EMAIL_HOST_USER=${{ vars.EMAIL_HOST_USER }} >> .env
            echo DEFAULT_FROM_EMAIL=${{ vars.DEFAULT_FROM_EMAIL }} >> .env
            echo "EMAIL_HOST_PASSWORD=${{ secrets.EMAIL_HOST_PASSWORD }}" >> .env
            echo EMAIL_PORT=${{ vars.EMAIL_PORT }} >> .env
            echo EMAIL_USE_SSL=${{ vars.EMAIL_USE_SSL }} >> .env
            echo EMAIL_USE_TLS=${{ vars.EMAIL_USE_TLS }} >> .env

            echo CELERY_BROKER=${{ vars.CELERY_BROKER }} >> .env

            docker compose down
            docker image rm ${{ vars.DOCKER_USERNAME }}/event
            docker image rm ${{ vars.DOCKER_USERNAME }}/funtech-front
            docker compose pull
            docker compose up -d